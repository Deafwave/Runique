program HCI_GemCutter;
{$i ../RuniqueInclude.simba}
var
ResetLimit,clientbitmap1,clientbitmap2,MinutesToUseBankCommand,Trips:integer;
ItemSlotShop,SmithSlotNum:integer;
MinRuns:integer;
ItemType:integer;
procedure FreeImages;
begin
     freebitmap(clientbitmap1);
     freebitmap(clientbitmap2);
end;

procedure main;forward;
procedure reset;
begin
  if ResetLimit > 2 then
  begin
  writeln('to many resets');
  terminatescript;
  end;
  inc(ResetLimit);
  SendCommand('::market');
  wait(3000);
  main;
end;

procedure loadimages;
begin
        clientbitmap1 := bitmapFromClient(577, 271, 587, 281);  //1st slot
        clientbitmap2 := bitmapFromClient(704, 487, 714, 497);  //28th Slot
end;

Procedure Proggy(runs:integer);
begin
  clearDebug;
  writeln('|---------------------------------------------------------|');
  writeln('||================Runique GemCutter ===================|');
  writeln('           Time Running: '+ MsToTime(GetTimeRunning, 3));
  writeln('           Rough Combines Made ' + inttostr(runs * 26));
  writeln('||=======================================================||');
  writeln('|---------------------------------------------------------|');
end;

procedure GemCutterAIO;
begin
if not RuniqueBagFull then
  begin
  OpenHCIShop(6);
  buyitem(ItemSlotShop);
  end else
  begin
  if BitmapinSlot(28,clientbitmap2,5) and BitmapinSlot(1,clientbitmap1,5) then
  begin
  UseItemOnItem(1,28,250);
  MakeItems(ItemType);
  WaitBackPackChange(clientbitmap2,10,100,500,0);
  NoteUnnoteItem(4);
  inc(Trips);
  Proggy(Trips);
  //BankingTimer(MinutesToUseBankCommand,MinRuns);
  end;
  end;
end;
procedure main;
begin
 repeat
  wait(500);
  writeln('test');
  GemCutterAIO;
 until(false);
end;
begin
  SetupRuniqueinclude();
  Addonterminate('FreeImages');

  MinRuns:= 25;
  MinutesToUseBankCommand:= 0;
  ItemSlotShop:= 17;  //12 = Opal, 13 = Jade, 14 = Red Topaz, 15 = Sapphire,
                      //16 = Emerald, 17 = Ruby, 18 = Diamond
  ItemType := 1;      //1 = Gems, 2 = ...Future Use
  loadimages;
  main;
end;
